<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_node_load().
 */
function dkan_data_node_load(array $entities) {

  foreach ($entities as $entity) {
    if ($entity->bundle() == "data" && $entity->field_data_type->value == "dataset") {
      // Temporarily save the raw json metadata, for later use.
      $entity->unreferenced_json_metadata = $entity->get('field_json_metadata')->value;

      $metadata = json_decode($entity->get('field_json_metadata')->value);
      if (isset($metadata->theme)) {
        $referencer = Drupal::service("dkan_data.value_referencer");
        $metadata->theme = $referencer->dereference($metadata);
        $entity->set('field_json_metadata', json_encode($metadata));
      }
    }
  }

}

/**
 * Implements hook_entity_presave().
 */
function dkan_data_entity_presave(EntityInterface $entity) {

  if ($entity->bundle() != "data") {
    return;
  }

  if ($entity->get('field_data_type')->value != 'dataset') {
    return;
  }

  $entityType = $entity->getEntityTypeId();

  $metadata = json_decode($entity->get('field_json_metadata')->value);

  $title = isset($metadata->title) ? $metadata->title : $metadata->name;
  if ($entityType == 'node') {
    $entity->setTitle($title);
    if (empty($entity->field_data_type->value)) {
      $entity->field_data_type->value = "dataset";
    }
    $created = new DateTime();
    $created->setTimestamp($entity->getCreatedTime());
    $metadata->created = $created->format('Y-m-d\TH:i:s');

    $changed = new DateTime();
    $changed->setTimestamp($entity->getChangedTime());
    $metadata->modified = $changed->format('Y-m-d\TH:i:s');
  }

  // If there is no uuid add one.
  if (!isset($metadata->identifier)) {
    $metadata->identifier = $entity->uuid();
  }
  // If one exists in the uui it should be the same in the table.
  else {
    $entity->set('uuid', $metadata->identifier);
  }

  $referencer = Drupal::service("dkan_data.value_referencer");
  if (isset($metadata->theme)) {
    $metadata->theme = $referencer->reference($metadata);
  }
  $entity->set('field_json_metadata', json_encode($metadata));
//  ddl($entity->get('field_json_metadata')->value, 'entity after referencing themes');

  if (isset($entity->original)) {
    if (isset($entity->unreferenced_json_metadata)) {
//      ddl($entity->unreferenced_json_metadata, 'unreferenced_json_metadata');
    }
//    ddl($entity->original->get('field_json_metadata')->value, "presave original json value");
//    ddl($entity->get('field_json_metadata')->value, "presave incoming json value");
    $referencer->processDeletedReferences(
      $entity->unreferenced_json_metadata,
      $entity->get('field_json_metadata')->value
    );
  }
}


/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dkan_data_node_insert(EntityInterface $entity) {
  // Only process potentially deleted references for datasets.
  if ($entity->bundle() == 'data' && $entity->get('field_data_type')->value == 'dataset') {
//    ddl($entity, 'dkan_data_node_insert entity');
//    ddl($entity->original->get('field_json_metadata')->value, 'dkan_data_node_update original');
  }
}

  /**
 * Implements hook_ENTITY_TYPE_update().
 */
function dkan_data_node_update(EntityInterface $entity) {
  // Check for orphan references when datasets are updated.
  if ($entity->bundle() == 'data' && $entity->get('field_data_type')->value == 'dataset') {
//    ddl($entity->unreferenced_json_metadata, 'dkan_data_node_update entity');
//    ddl($entity->original->get('field_json_metadata')->value, 'dkan_data_node_update original');
//    ddl($entity, 'dkan_data_node_update entity');
//    ddl($entity->get('field_json_metadata')->value, 'dkan_data_node_update new');
//    $referencer = Drupal::service("dkan_data.value_referencer");
//    $referencer->processDeletedReferences($metadata);
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function dkan_data_node_predelete(EntityInterface $entity) {
  // Check for orphan references when datasets are deleted.
  if ($entity->bundle() == 'data' && $entity->get('field_data_type')->value == 'dataset') {
    $referencer = Drupal::service("dkan_data.value_referencer");
    $referencer->processDeletedReferences($entity->unreferenced_json_metadata);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function dkan_data_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'data') {
    if (isset($fields['field_json_metadata'])) {
      $fields['field_json_metadata']->addConstraint('ProperJson', []);
    }
  }
}
