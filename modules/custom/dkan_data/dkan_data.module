<?php

/**
 * @file
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\dkan_data\ValueReferencer;

/**
 * Implements hook_node_load().
 */
function dkan_data_node_load(array $entities) {

  foreach ($entities as $entity) {
    if ($entity->bundle() == "data" && $entity->field_data_type->value == "dataset") {
      // Temporarily save the raw json metadata, for later use.
      $metadata_string = $entity->get('field_json_metadata')->value;
      $entity->referenced_metadata = $metadata_string;

      // Dereference dataset properties.
      $metadata_obj = json_decode($metadata_string);
      $referencer = Drupal::service("dkan_data.value_referencer");
      $metadata_obj = $referencer->dereference($metadata_obj, dereferencing_method());
      $entity->set('field_json_metadata', json_encode($metadata_obj));
    }
  }

}

/**
 * Helps select the dereferencing method.
 *
 * @return int
 *   One of the int constants from class ValueReferencer:
 *     - DEREFERENCE_OUTPUT_DEFAULT = 0
 *     - DEREFERENCE_OUTPUT_MINIMAL = 1
 *     - DEREFERENCE_OUTPUT_VERBOSE = 2
 */
function dereferencing_method() : int {
  $allowed_methods = [
    ValueReferencer::DEREFERENCE_OUTPUT_DEFAULT,
    ValueReferencer::DEREFERENCE_OUTPUT_REFERENCE_IDS,
  ];

  // Selection based on API's http request query parameters.
  $params = Drupal::request()->query->all();
  if (isset($params['show-reference-ids'])) {
    return ValueReferencer::DEREFERENCE_OUTPUT_REFERENCE_IDS;
  }

  // Selection based on static variable.
  $method = drupal_static('dkan_data_dereference_method');
  if (isset($method) && in_array($method, $allowed_methods)) {
    return $method;
  }

  // Default case.
  return ValueReferencer::DEREFERENCE_OUTPUT_DEFAULT;
}

/**
 * Implements hook_entity_presave().
 */
function dkan_data_entity_presave(EntityInterface $entity) {

  if ($entity->bundle() != "data") {
    return;
  }

  if ($entity->get('field_data_type')->value != 'dataset') {
    return;
  }

  $entityType = $entity->getEntityTypeId();

  $metadata = json_decode($entity->get('field_json_metadata')->value);

  $title = isset($metadata->title) ? $metadata->title : $metadata->name;
  if ($entityType == 'node') {
    $entity->setTitle($title);
    if (empty($entity->field_data_type->value)) {
      $entity->field_data_type->value = "dataset";
    }
  }

  // If there is no uuid add one.
  if (!isset($metadata->identifier)) {
    $metadata->identifier = $entity->uuid();
  }
  // If one exists in the uui it should be the same in the table.
  else {
    $entity->set('uuid', $metadata->identifier);
  }

  // Reference the dataset's values, and update our json metadata.
  $referencer = Drupal::service("dkan_data.value_referencer");
  $metadata = $referencer->reference($metadata);
  $entity->set('field_json_metadata', json_encode($metadata));

  // Check for possible orphan property references when updating a dataset.
  if (isset($entity->original)) {
    $referencer->processReferencesInUpdatedDataset(
      json_decode($entity->referenced_metadata),
      $metadata
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function dkan_data_node_predelete(EntityInterface $entity) {
  // Check for possible orphan property references when deleting a dataset.
  if ($entity->bundle() == 'data' && $entity->get('field_data_type')->value == 'dataset') {
    $referenced_dataset = json_decode($entity->referenced_metadata);
    $referencer = Drupal::service("dkan_data.value_referencer");
    $referencer->processReferencesInDeletedDataset($referenced_dataset);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function dkan_data_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'data') {
    if (isset($fields['field_json_metadata'])) {
      $fields['field_json_metadata']->addConstraint('ProperJson', []);
    }
  }
}
