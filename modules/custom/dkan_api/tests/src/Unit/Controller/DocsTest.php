<?php

namespace Drupal\Tests\dkan_api\Unit\Controller;

use Drupal\Core\Extension\Extension;
use Drupal\dkan_api\Controller\Docs;
use Drupal\dkan_common\Tests\DkanTestBase;
use Drupal\Core\Extension\ModuleHandlerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\dkan_data\Storage\Data;

/**
 * Class.
 */
class DocsTest extends DkanTestBase {

  /**
   *
   */
  public function getContainer() {
    // TODO: Change the autogenerated stub.
    parent::setUp();

    $container = $this->getMockBuilder(ContainerInterface::class)
      ->setMethods(['get'])
      ->disableOriginalConstructor()
      ->getMockForAbstractClass();

    $container->method('get')
      ->with(
        $this->logicalOr(
          $this->equalTo('module_handler'),
          $this->equalTo('dkan_data.storage')
        )
      )
      ->will($this->returnCallback([$this, 'containerGet']));

    return $container;
  }

  /**
   *
   */
  public function containerGet($input) {
    switch ($input) {
      case 'module_handler':
        return $this->getModuleHandlerMock();

      case 'dkan_data.storage':
        return $this->getDataMock();

      break;
    }
  }

  /**
   *
   */
  public function testGetComplete() {
    $controller = Docs::create($this->getContainer());
    $response = $controller->getComplete();

    $spec = '{"openapi":"3.0.1","info":{"title":"API Documentation","version":"Alpha"},"paths":{"\/api\/v1\/dataset\/{uuid}":{"get":{"summary":"Get this dataset","tags":["Dataset"],"parameters":[{"name":"uuid","in":"path","description":"Dataset uuid","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Ok"}}}}}}';

    $this->assertEquals($spec, $response->getContent());
  }

  /**
   *
   */
  private function getModuleHandlerMock() {
    $mock = $this->getMockBuilder(ModuleHandlerInterface::class)
      ->disableOriginalConstructor()
      ->setMethods(['getModule'])
      ->getMockForAbstractClass();

    $mock->method('getModule')
      ->willReturn($this->getExtensionMock());

    return $mock;
  }

  /**
   *
   */
  private function getExtensionMock() {
    $mock = $this->getMockBuilder(Extension::class)
      ->disableOriginalConstructor()
      ->setMethods(['getPath'])
      ->getMock();

    $mock->method('getPath')
      ->willReturn(__DIR__);

    return $mock;
  }

  /**
   *
   */
  private function getDataMock() {
    $mock = $this->getMockBuilder(Data::class)
      ->disableOriginalConstructor()
      ->setMethods(['retrieve'])
      ->getMock();

    $mock->method('retrieve')
      ->willReturn("{}");

    return $mock;
  }

}
