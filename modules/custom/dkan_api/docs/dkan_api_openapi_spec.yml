openapi: 3.0.2
info:
  title: API Documentation
  version: Alpha
tags:
  - name: Dataset
  - name: Properties
    description: organizations, resources, tags and themes.
  - name: SQL Query
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    uuid:
      name: "uuid"
      in: path
      description: A uuid from a dataset or a property
      required: true
      schema:
        type: string
      example: "11111111-1111-4111-1111-111111111111"
    property:
      name: "property"
      in: path
      description: Property of a dataset
      required: true
      schema:
        type: string
    query:
      name: "query"
      in: path
      description: SQL query
      required: true
      schema:
        type: string
  schemas:
    responseMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    responseEndpointIdentifier:
      type: object
      required:
        - endpoint
        - identifier
      properties:
        endpoint:
          type: string
        identifier:
          type: string
    # @TODO: Load directly from dkan2's schema/collections/dataset.json schema
    Dataset:
      type: object
      required:
        - title
        - description
        - identifier
        - accessLevel
      properties:
        title:
          type: string
        description:
          type: string
        identifier:
          type: string
        accessLevel:
          type: string
          enum:
            - public
            - restricted public
            - non-public
    Property:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
paths:
  /api/v1/dataset:
    get:
      summary: Get all datasets
      tags:
        - Dataset
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
    post:
      summary: Create a dataset
      tags:
        - Dataset
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
            example: {
                "title": "UPDATED Title for 111111",
                "description": "UPDATED Description for 111111",
                "identifier": "11111111-1111-4111-1111-111111111111",
                "accessLevel": "public"
              }
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
  /api/v1/dataset/{uuid}:
    get:
      summary: Get this dataset
      tags:
        - Dataset
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
    put:
      summary: Replace a dataset
      tags:
        - Dataset
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
            example: {
                "title": "UPDATED Title for 111111",
                "description": "UPDATED Description for 111111",
                "identifier": "11111111-1111-4111-1111-111111111111",
                "accessLevel": "public"
              }
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
    patch:
      summary: Update a dataset
      tags:
        - Dataset
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Only a subset of Dataset schema
              type: object
            example: {
                "theme": [
                  "Some New Theme"
                ]
              }
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
    delete:
      summary: Delete a dataset
      tags:
        - Dataset
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        200:
          description: Dataset has been deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseMessage"
  /api/v1/{property}:
    get:
      summary: Get properties
      tags:
        - Properties
      parameters:
        - $ref: "#/components/parameters/property"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
    post:
      summary: Create a property
      tags:
        - Properties
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/property"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
  /api/v1/{property}/{uuid}:
    get:
      summary: Get a property
      tags:
        - Properties
      parameters:
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/uuid"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
    put:
      summary: Replace a property
      tags:
        - Properties
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
    patch:
      summary: Update a property
      tags:
        - Properties
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Only a subset of Property schema
              type: object
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseEndpointIdentifier"
    delete:
      summary: Delete a property
      tags:
        - Properties
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/property"
        - $ref: "#/components/parameters/uuid"
      responses:
        200:
          description: Property has been deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseMessage"
  /api/v1/sql/{query}:
    get:
      summary: Query resources in datastore
      description: Interact with resources in the datastore using an SQL-like syntax.
      tags:
        - SQL Query
      parameters:
        - $ref: "#/components/parameters/query"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
