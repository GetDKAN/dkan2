{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","App","history","useHistory","useState","identifier","setIdentifier","message","setMessage","schema","setSchema","uiSchema","setUiSchema","formData","setFormData","submitDataset","event","cleanData","data","Object","keys","forEach","key","isNaN","cleanTheData","length","put","then","link","catch","error","response","post","id","currentUrlParams","URLSearchParams","window","location","search","set","push","pathname","toString","getId","ids","getAll","useEffect","a","get","response2","fetchSchema","fetch","toast","success","fields","DescriptionField","description","className","dangerouslySetInnerHTML","__html","timerExpires","position","pauseOnHover","intent","type","onClick","href","autocomplete","onSubmit","e","onError","console","log","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.065f4575.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Form from \"@rjsf/core\";\nimport 'bootstrap-lite/lib.bootstrap.css';\nimport ToastBox, { toast } from \"react-toastbox\";\nimport './App.scss';\n\nconst axios = require('axios');\n\nfunction App() {\n  const baseUrl = \"\";\n\n  let history = useHistory();\n\n  const [identifier, setIdentifier] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [schema, setSchema] = useState({});\n  const [uiSchema, setUiSchema] = useState({});\n  const [formData, setFormData] = useState({});\n\n\n  useEffect(() => {\n    async function fetchSchema() {\n      const response = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset');\n      setSchema(response.data);\n\n      const response2 = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset.ui');\n      setUiSchema(response2.data);\n\n      const id = getId()\n      if (id) {\n        setIdentifier(id);\n      }\n    }\n  \n    fetchSchema();\n  }, []);\n\n  useEffect(() => {\n    async function fetch() {\n      const response = await axios.get(baseUrl + '/api/1/metastore/schemas/dataset/items/' + identifier);\n      setFormData(response.data);\n    }  \n  \n    fetch();\n  }, [identifier]);\n\n  useEffect(() => {\n    if (message.length > 0) {\n      toast.success(message);\n    }\n  }, [message]);\n\n  function cleanTheData(data) {\n    let cleanData = {};\n    Object.keys(data).forEach((key) => {\n        if (isNaN(key)) {\n          cleanData[key] = data[key];\n        }\n      }\n    );\n    return cleanData;\n  }\n\n  function submitDataset(event) {\n    const data = event.formData;\n    const cleanData = cleanTheData(data);\n    \n    if (identifier.length > 0) {\n      axios.put(baseUrl + '/api/1/metastore/schemas/dataset/items/' + identifier, cleanData).then(\n        () => {\n          let str = 'Back to datasets.';\n          let link = str.link(\"/admin/content/datasets\");\n          setMessage(\"The dataset with identifier \" + identifier + \" has been updated.\");\n          //setTimeout(window.location = \"/admin/content/datasets\", 2000);\n        }\n      ).catch((error) => {\n        if (error.response) {\n          setMessage(error.response.data.message);\n        }\n      });;\n    }\n    else {\n      axios.post(baseUrl + '/api/1/metastore/schemas/dataset/items', cleanData).then(\n        (response) => {\n          const id = response.data.identifier;\n          \n          let currentUrlParams = new URLSearchParams(window.location.search);\n          currentUrlParams.set(\"id\", id);\n          history.push(window.location.pathname + \"?\" + currentUrlParams.toString());\n          \n          setIdentifier(id);\n          setMessage(\"A dataset with the identifier \" + id + \" has been created.\");\n        }\n      ).catch((error) => {\n        if (error.response) {\n          setMessage(error.response.data.message);\n        }\n      });\n    }\n  }\n\n  function getId() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const ids = urlParams.getAll('id');\n    if (ids.length > 0) {\n      return ids[0];\n    }\n    return null;\n  }\n\n  const CustomDescriptionField = ({id, description}) => {\n    return <div className=\"dc-field-label\"  id={id} dangerouslySetInnerHTML={{__html: description}} />\n  };\n  \n  const fields = {\n    DescriptionField: CustomDescriptionField\n  };\n\n  return (\n    <>\n      <ToastBox\n        timerExpires={5000}\n        position=\"top-left\"\n        pauseOnHover={true}\n        intent=\"success\"\n      />\n      <button className=\"btn btn-default\" type=\"button\" onClick={event =>  window.location.href='/admin/content/datasets'}>Back to Datasets</button>\n      <Form \n        id=\"dc-json-editor\" \n        schema={schema}\n        fields={fields}\n        formData={formData} \n        uiSchema={uiSchema}\n        autocomplete=\"on\"\n        onSubmit={ (e) => {\n          setMessage(\"\");\n          submitDataset(e);\n        } }\n        onError={(e) => { console.log(e);}}>\n        <div>\n          <button className=\"btn btn-success\" type=\"submit\">Submit</button>\n          <button className=\"btn btn-default\" type=\"button\" onClick={event =>  window.location.href='/admin/content/datasets'}>Cancel</button>\n        </div>\n      </Form>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}